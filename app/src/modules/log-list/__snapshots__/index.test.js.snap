// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`render the log list 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <LogList
    actions={
      Object {
        "deleteLog": [MockFunction],
        "edit": [MockFunction],
        "fetchLogs": [MockFunction] {
          "calls": Array [
            Array [],
          ],
        },
        "onSearchChange": [MockFunction],
        "onUpdate": [MockFunction],
        "startEditing": [MockFunction],
        "stopEditing": [MockFunction],
      }
    }
    logs={
      Immutable.List [
        Immutable.Map {
          "source": Immutable.Map {
            "uuid": "1",
            "content": "content 1",
          },
          "edited": Immutable.Map {
            "editing": false,
          },
        },
        Immutable.Map {
          "source": Immutable.Map {
            "uuid": "2",
            "content": "content 2",
          },
          "edited": Immutable.Map {
            "editing": false,
          },
        },
        Immutable.Map {
          "source": Immutable.Map {
            "uuid": "3",
            "content": "content 3",
          },
          "edited": Immutable.Map {
            "editing": false,
          },
        },
      ]
    }
    q="q"
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <Connect(NewLogInput) />,
        <SearchBar
          className="LogList__searchBar col-md-8 offset-md-2"
          onChange={[MockFunction]}
          q="q"
        />,
        Immutable.List [
          <div>
            <LogItem
              log={
                Immutable.Map {
                  "uuid": "1",
                  "content": "content 1",
                }
              }
              onDelete={[MockFunction]}
              onEdit={[MockFunction]}
            />
          </div>,
          <div>
            <LogItem
              log={
                Immutable.Map {
                  "uuid": "2",
                  "content": "content 2",
                }
              }
              onDelete={[MockFunction]}
              onEdit={[MockFunction]}
            />
          </div>,
          <div>
            <LogItem
              log={
                Immutable.Map {
                  "uuid": "3",
                  "content": "content 3",
                }
              }
              onDelete={[MockFunction]}
              onEdit={[MockFunction]}
            />
          </div>,
        ],
      ],
      "className": "container",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {},
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "className": "LogList__searchBar col-md-8 offset-md-2",
          "onChange": [MockFunction],
          "q": "q",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": "1",
        "nodeType": "host",
        "props": Object {
          "children": <LogItem
            log={
              Immutable.Map {
                "uuid": "1",
                "content": "content 1",
              }
            }
            onDelete={[MockFunction]}
            onEdit={[MockFunction]}
          />,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "log": Immutable.Map {
              "uuid": "1",
              "content": "content 1",
            },
            "onDelete": [MockFunction],
            "onEdit": [MockFunction],
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        "type": "div",
      },
      Object {
        "instance": null,
        "key": "2",
        "nodeType": "host",
        "props": Object {
          "children": <LogItem
            log={
              Immutable.Map {
                "uuid": "2",
                "content": "content 2",
              }
            }
            onDelete={[MockFunction]}
            onEdit={[MockFunction]}
          />,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "log": Immutable.Map {
              "uuid": "2",
              "content": "content 2",
            },
            "onDelete": [MockFunction],
            "onEdit": [MockFunction],
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        "type": "div",
      },
      Object {
        "instance": null,
        "key": "3",
        "nodeType": "host",
        "props": Object {
          "children": <LogItem
            log={
              Immutable.Map {
                "uuid": "3",
                "content": "content 3",
              }
            }
            onDelete={[MockFunction]}
            onEdit={[MockFunction]}
          />,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "log": Immutable.Map {
              "uuid": "3",
              "content": "content 3",
            },
            "onDelete": [MockFunction],
            "onEdit": [MockFunction],
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        "type": "div",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <Connect(NewLogInput) />,
          <SearchBar
            className="LogList__searchBar col-md-8 offset-md-2"
            onChange={[MockFunction]}
            q="q"
          />,
          Immutable.List [
            <div>
              <LogItem
                log={
                  Immutable.Map {
                    "uuid": "1",
                    "content": "content 1",
                  }
                }
                onDelete={[MockFunction]}
                onEdit={[MockFunction]}
              />
            </div>,
            <div>
              <LogItem
                log={
                  Immutable.Map {
                    "uuid": "2",
                    "content": "content 2",
                  }
                }
                onDelete={[MockFunction]}
                onEdit={[MockFunction]}
              />
            </div>,
            <div>
              <LogItem
                log={
                  Immutable.Map {
                    "uuid": "3",
                    "content": "content 3",
                  }
                }
                onDelete={[MockFunction]}
                onEdit={[MockFunction]}
              />
            </div>,
          ],
        ],
        "className": "container",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "className": "LogList__searchBar col-md-8 offset-md-2",
            "onChange": [MockFunction],
            "q": "q",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": "1",
          "nodeType": "host",
          "props": Object {
            "children": <LogItem
              log={
                Immutable.Map {
                  "uuid": "1",
                  "content": "content 1",
                }
              }
              onDelete={[MockFunction]}
              onEdit={[MockFunction]}
            />,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "log": Immutable.Map {
                "uuid": "1",
                "content": "content 1",
              },
              "onDelete": [MockFunction],
              "onEdit": [MockFunction],
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": "div",
        },
        Object {
          "instance": null,
          "key": "2",
          "nodeType": "host",
          "props": Object {
            "children": <LogItem
              log={
                Immutable.Map {
                  "uuid": "2",
                  "content": "content 2",
                }
              }
              onDelete={[MockFunction]}
              onEdit={[MockFunction]}
            />,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "log": Immutable.Map {
                "uuid": "2",
                "content": "content 2",
              },
              "onDelete": [MockFunction],
              "onEdit": [MockFunction],
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": "div",
        },
        Object {
          "instance": null,
          "key": "3",
          "nodeType": "host",
          "props": Object {
            "children": <LogItem
              log={
                Immutable.Map {
                  "uuid": "3",
                  "content": "content 3",
                }
              }
              onDelete={[MockFunction]}
              onEdit={[MockFunction]}
            />,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "log": Immutable.Map {
                "uuid": "3",
                "content": "content 3",
              },
              "onDelete": [MockFunction],
              "onEdit": [MockFunction],
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": "div",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;

exports[`render the log list with one in edit mode 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <LogList
    actions={
      Object {
        "deleteLog": [MockFunction],
        "edit": [MockFunction],
        "fetchLogs": [MockFunction] {
          "calls": Array [
            Array [],
          ],
        },
        "onSearchChange": [MockFunction],
        "onUpdate": [MockFunction],
        "startEditing": [MockFunction],
        "stopEditing": [MockFunction],
      }
    }
    logs={
      Immutable.List [
        Immutable.Map {
          "source": Immutable.Map {
            "uuid": "1",
            "content": "content 1",
          },
          "edited": Immutable.Map {
            "editing": false,
          },
        },
        Immutable.Map {
          "source": Immutable.Map {
            "uuid": "2",
            "content": "content 2",
          },
          "edited": Immutable.Map {
            "editing": true,
            "content": "editing",
            "updating": false,
          },
        },
        Immutable.Map {
          "source": Immutable.Map {
            "uuid": "3",
            "content": "content 3",
          },
          "edited": Immutable.Map {
            "editing": false,
          },
        },
      ]
    }
    q="q"
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <Connect(NewLogInput) />,
        <SearchBar
          className="LogList__searchBar col-md-8 offset-md-2"
          onChange={[MockFunction]}
          q="q"
        />,
        Immutable.List [
          <div>
            <LogItem
              log={
                Immutable.Map {
                  "uuid": "1",
                  "content": "content 1",
                }
              }
              onDelete={[MockFunction]}
              onEdit={[MockFunction]}
            />
          </div>,
          <div>
            <LogItemEditing
              content="editing"
              onCancel={[MockFunction]}
              onEditContent={[MockFunction]}
              onUpdate={[MockFunction]}
              updating={false}
              uuid="2"
            />
          </div>,
          <div>
            <LogItem
              log={
                Immutable.Map {
                  "uuid": "3",
                  "content": "content 3",
                }
              }
              onDelete={[MockFunction]}
              onEdit={[MockFunction]}
            />
          </div>,
        ],
      ],
      "className": "container",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {},
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "className": "LogList__searchBar col-md-8 offset-md-2",
          "onChange": [MockFunction],
          "q": "q",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": "1",
        "nodeType": "host",
        "props": Object {
          "children": <LogItem
            log={
              Immutable.Map {
                "uuid": "1",
                "content": "content 1",
              }
            }
            onDelete={[MockFunction]}
            onEdit={[MockFunction]}
          />,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "log": Immutable.Map {
              "uuid": "1",
              "content": "content 1",
            },
            "onDelete": [MockFunction],
            "onEdit": [MockFunction],
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        "type": "div",
      },
      Object {
        "instance": null,
        "key": "2",
        "nodeType": "host",
        "props": Object {
          "children": <LogItemEditing
            content="editing"
            onCancel={[MockFunction]}
            onEditContent={[MockFunction]}
            onUpdate={[MockFunction]}
            updating={false}
            uuid="2"
          />,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "content": "editing",
            "onCancel": [MockFunction],
            "onEditContent": [MockFunction],
            "onUpdate": [MockFunction],
            "updating": false,
            "uuid": "2",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        "type": "div",
      },
      Object {
        "instance": null,
        "key": "3",
        "nodeType": "host",
        "props": Object {
          "children": <LogItem
            log={
              Immutable.Map {
                "uuid": "3",
                "content": "content 3",
              }
            }
            onDelete={[MockFunction]}
            onEdit={[MockFunction]}
          />,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "log": Immutable.Map {
              "uuid": "3",
              "content": "content 3",
            },
            "onDelete": [MockFunction],
            "onEdit": [MockFunction],
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        "type": "div",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <Connect(NewLogInput) />,
          <SearchBar
            className="LogList__searchBar col-md-8 offset-md-2"
            onChange={[MockFunction]}
            q="q"
          />,
          Immutable.List [
            <div>
              <LogItem
                log={
                  Immutable.Map {
                    "uuid": "1",
                    "content": "content 1",
                  }
                }
                onDelete={[MockFunction]}
                onEdit={[MockFunction]}
              />
            </div>,
            <div>
              <LogItemEditing
                content="editing"
                onCancel={[MockFunction]}
                onEditContent={[MockFunction]}
                onUpdate={[MockFunction]}
                updating={false}
                uuid="2"
              />
            </div>,
            <div>
              <LogItem
                log={
                  Immutable.Map {
                    "uuid": "3",
                    "content": "content 3",
                  }
                }
                onDelete={[MockFunction]}
                onEdit={[MockFunction]}
              />
            </div>,
          ],
        ],
        "className": "container",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "className": "LogList__searchBar col-md-8 offset-md-2",
            "onChange": [MockFunction],
            "q": "q",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": "1",
          "nodeType": "host",
          "props": Object {
            "children": <LogItem
              log={
                Immutable.Map {
                  "uuid": "1",
                  "content": "content 1",
                }
              }
              onDelete={[MockFunction]}
              onEdit={[MockFunction]}
            />,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "log": Immutable.Map {
                "uuid": "1",
                "content": "content 1",
              },
              "onDelete": [MockFunction],
              "onEdit": [MockFunction],
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": "div",
        },
        Object {
          "instance": null,
          "key": "2",
          "nodeType": "host",
          "props": Object {
            "children": <LogItemEditing
              content="editing"
              onCancel={[MockFunction]}
              onEditContent={[MockFunction]}
              onUpdate={[MockFunction]}
              updating={false}
              uuid="2"
            />,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "content": "editing",
              "onCancel": [MockFunction],
              "onEditContent": [MockFunction],
              "onUpdate": [MockFunction],
              "updating": false,
              "uuid": "2",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": "div",
        },
        Object {
          "instance": null,
          "key": "3",
          "nodeType": "host",
          "props": Object {
            "children": <LogItem
              log={
                Immutable.Map {
                  "uuid": "3",
                  "content": "content 3",
                }
              }
              onDelete={[MockFunction]}
              onEdit={[MockFunction]}
            />,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "log": Immutable.Map {
                "uuid": "3",
                "content": "content 3",
              },
              "onDelete": [MockFunction],
              "onEdit": [MockFunction],
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": "div",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;
